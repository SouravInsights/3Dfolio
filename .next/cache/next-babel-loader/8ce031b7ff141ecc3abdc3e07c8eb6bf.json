{"ast":null,"code":"var _jsxFileName = \"G:\\\\Personal Projects\\\\VisiontoSpace Website\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect, Suspense } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, useFrame, useLoader } from \"react-three-fiber\";\n/* import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"; */\n\n/* const loader = new GLTFLoader();\n\nloader.load(\n  \"/glb/piece.glb\",\n  function (gltf) {\n    scene.add(gltf.scene);\n  },\n  undefined,\n  function (error) {\n    console.error(error);\n  }\n); */\n\nfunction Loading() {\n  return __jsx(\"mesh\", {\n    visible: true,\n    position: [0, 0, 0],\n    rotation: [0, 0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(\"sphereGeometry\", {\n    attach: \"geometry\",\n    args: [1, 16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), __jsx(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: \"white\",\n    transparent: true,\n    opacity: 0.6,\n    roughness: 1,\n    metalness: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }));\n}\n/* let GLTFLoader;\n\nconst Piece = ({ speed, factor, url, ...props }) => {\n  const gltf = useLoader(GLTFLoader, url);\n  const group = useRef();\n\n  return (\n    <group>\n      <scene>\n        <mesh visible geometry={nodes.Default.geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color=\"white\"\n            roughness={0.3}\n            metalness={0.3}\n          />\n        </mesh>\n      </scene>\n    </group>\n  );\n}; */\n\n\nfunction PiecePage() {\n  const group = useRef();\n  useEffect(() => {\n    GLTFLoader = require(\"three/examples/jsm/loaders/GLTFLoader\").GLTFLoader;\n  }, []); // useFrame will run outside of react in animation frames to optimize updates.\n\n  useFrame(() => {\n    group.current.rotation.y += 0.004;\n  });\n  return (// Add a ref to the group. This gives us a hook to manipulate the properties of this geometry in the useFrame callback.\n    __jsx(\"group\", {\n      ref: group,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, __jsx(\"mesh\", {\n      visible: true,\n      geometry: nodes.Default.geometry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, __jsx(\"meshStandardMaterial\", {\n      attach: \"material\",\n      color: \"white\",\n      roughness: 0.3,\n      metalness: 0.3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    })))\n  );\n}\n/* const PiecePage = (props) => {\n  useEffect(() => {\n    GLTFLoader = require(\"three/examples/jsm/loaders/GLTFLoader\").GLTFLoader;\n  }, []);\n  return (\n    <>\n      <Canvas camera={{ position: [0, 0, 35] }}>\n        <ambientLight intensity={2} />\n        <pointLight position={[40, 40, 40]} />\n        <Suspense fallback={null}>\n          <Piece />\n        </Suspense>\n      </Canvas>\n    </>\n  );\n}; */\n\n\nexport default PiecePage;","map":{"version":3,"sources":["G:/Personal Projects/VisiontoSpace Website/pages/index.js"],"names":["React","useRef","useState","useEffect","Suspense","THREE","Canvas","useFrame","useLoader","Loading","PiecePage","group","GLTFLoader","require","current","rotation","y","nodes","Default","geometry"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,mBAA5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,OAAT,GAAmB;AACjB,SACE;AAAM,IAAA,OAAO,MAAb;AAAc,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxB;AAAmC,IAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAgB,IAAA,MAAM,EAAC,UAAvB;AAAkC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,KAAK,EAAC,OAFR;AAGE,IAAA,WAAW,MAHb;AAIE,IAAA,OAAO,EAAE,GAJX;AAKE,IAAA,SAAS,EAAE,CALb;AAME,IAAA,SAAS,EAAE,CANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAaD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,SAAT,GAAqB;AACnB,QAAMC,KAAK,GAAGV,MAAM,EAApB;AACAE,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU,GAAGC,OAAO,CAAC,uCAAD,CAAP,CAAiDD,UAA9D;AACD,GAFQ,EAEN,EAFM,CAAT,CAFmB,CAMnB;;AACAL,EAAAA,QAAQ,CAAC,MAAM;AACbI,IAAAA,KAAK,CAACG,OAAN,CAAcC,QAAd,CAAuBC,CAAvB,IAA4B,KAA5B;AACD,GAFO,CAAR;AAGA,SACE;AACA;AAAO,MAAA,GAAG,EAAEL,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,OAAO,MAAb;AAAc,MAAA,QAAQ,EAAEM,KAAK,CAACC,OAAN,CAAcC,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,MAAM,EAAC,UADT;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,SAAS,EAAE,GAHb;AAIE,MAAA,SAAS,EAAE,GAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAFF;AAaD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,SAAf","sourcesContent":["import React, { useRef, useState, useEffect, Suspense } from \"react\";\nimport * as THREE from \"three\";\nimport { Canvas, useFrame, useLoader } from \"react-three-fiber\";\n/* import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"; */\n\n/* const loader = new GLTFLoader();\n\nloader.load(\n  \"/glb/piece.glb\",\n  function (gltf) {\n    scene.add(gltf.scene);\n  },\n  undefined,\n  function (error) {\n    console.error(error);\n  }\n); */\n\nfunction Loading() {\n  return (\n    <mesh visible position={[0, 0, 0]} rotation={[0, 0, 0]}>\n      <sphereGeometry attach=\"geometry\" args={[1, 16, 16]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color=\"white\"\n        transparent\n        opacity={0.6}\n        roughness={1}\n        metalness={0}\n      />\n    </mesh>\n  );\n}\n\n/* let GLTFLoader;\n\nconst Piece = ({ speed, factor, url, ...props }) => {\n  const gltf = useLoader(GLTFLoader, url);\n  const group = useRef();\n\n  return (\n    <group>\n      <scene>\n        <mesh visible geometry={nodes.Default.geometry}>\n          <meshStandardMaterial\n            attach=\"material\"\n            color=\"white\"\n            roughness={0.3}\n            metalness={0.3}\n          />\n        </mesh>\n      </scene>\n    </group>\n  );\n}; */\n\nfunction PiecePage() {\n  const group = useRef();\n  useEffect(() => {\n    GLTFLoader = require(\"three/examples/jsm/loaders/GLTFLoader\").GLTFLoader;\n  }, []);\n\n  // useFrame will run outside of react in animation frames to optimize updates.\n  useFrame(() => {\n    group.current.rotation.y += 0.004;\n  });\n  return (\n    // Add a ref to the group. This gives us a hook to manipulate the properties of this geometry in the useFrame callback.\n    <group ref={group}>\n      <mesh visible geometry={nodes.Default.geometry}>\n        <meshStandardMaterial\n          attach=\"material\"\n          color=\"white\"\n          roughness={0.3}\n          metalness={0.3}\n        />\n      </mesh>\n    </group>\n  );\n}\n\n/* const PiecePage = (props) => {\n  useEffect(() => {\n    GLTFLoader = require(\"three/examples/jsm/loaders/GLTFLoader\").GLTFLoader;\n  }, []);\n  return (\n    <>\n      <Canvas camera={{ position: [0, 0, 35] }}>\n        <ambientLight intensity={2} />\n        <pointLight position={[40, 40, 40]} />\n        <Suspense fallback={null}>\n          <Piece />\n        </Suspense>\n      </Canvas>\n    </>\n  );\n}; */\n\nexport default PiecePage;\n"]},"metadata":{},"sourceType":"module"}